第零章 导读

一、关于本书
二、读者对象
三、术语与风格
四、语言标准
五、本书的结构
六、如何阅读本书
七、本书的源代码

一、关于本书

- C++是一门伟大的语言，在某种程度上，它甚至超过了编程语言的境界，升华为一种哲学
- C++是一种多范式、可扩展的编程语言，支持基于过程、基于对象、面向对象、函数式、泛型、模板元、自动机等多种编程风格
- C++标准中的标准模板库（STL）极大地改变了C++程序员的思维方式，使泛型成为21世纪以来程序开发界非常流行的词汇之一

- C++标准委员会设立的Boost社区以及他们开发的Boost库，更将泛型发挥到极致
- Boost库代表了目前C++语言最新、最前沿的技术，内容博大精深，一点儿也不逊色于经典的STL

- 本书的定位是指南，而不是技术手册或使用说明，可以解答90%但不是全部的与Boost库相关的问题

二、读者对象

- 本书适合于有一定C++基础的读者
- 基本的要求是，熟悉面向对象编程技术，理解名字空间、异常、模板、泛型等高级特性，最好还了解设计模式和C++标准库提供的容器、算法等组件
- 如果读者是C++初学者，还不具备上述知识，建议先阅读附录A中推荐的技术书籍，再学习本书

三、术语与风格

- Boost库并不是一个单一的、平面化的程序库，它有复杂的内部结构，每个库可能由其他更小的库组成，因此，本书把所有的组成部分称为“组件”，“库”和“组件”这两个术语有时会通用
- 在使用template定义模板类或模板函数时，本书统一使用typename而不是常见的class，因为typename能更清楚地表明这是一个类型参数，而不一定是一个类，但对于Boost库的源代码，则会尽量保持其原始形式
- 在命名函数或类时，本书遵照C++标准库和Boost库的惯例，均采用小写形式，单词之间以下划线分隔，但并不要求读者也采用这种命名方式，通常使用大写字母开头的单词命名类会更好

- “未定义的行为”常用来指代某些操作可能导致的不正确结果，对其的一个较好的定义是，程序在开发人员面前运行正常，在测试人员面前运行正常，但在老板或最终用户面前运行时却崩溃了
- 未定义行为就是代码中的定时炸弹

四、语言标准

- 现今的C++有多个版本的国际标准，本书主要使用C++11
  * 不含数字标识的“C++标准”通常就是指C++11
  * 但当涉及到C++的某些语言特性时，会标明其所在的C++标准文档中的章节号
- 本书中使用较多的C++11的新语言特性包括nullptr、auto/decltype、for、lambda表达式
- 本书将C++标准定义的函数库称为“C++标准库”或STL，但其实STL只是C++标准库的一个子集

- 在一般情况下，使用C++标准库需要包含相应的头文件，并加上using namespace std语句
- 读者可以认为本书的所有代码都包含了下列头文件：string、iostream、vector、set、map、algorithm

五、本书的结构

- Boost官方提供了两种排列组件的方式，一种是按组件的字母排序，另一种是按功能分类排序，但这两种方式都不是组织本书结构的最佳方法
- 本书按照难易度和实用度对Boost库的组件分类排序，由浅入深，循序渐进

- 对于每个组件，通常先介绍其功能，然后说明其头文件和编译方法，列出类的声明概要，再通过例子讲解其详细用法和注意事项，涉及其他组件时则以交叉引用的方式指明其参考章节，最后对该库进行总结
- 本书共十六章，第一章是总论，第二到十三章是库，第十四章是设计模式，第十五章是结束语，最后一章是附录

六、如何阅读本书

- 本书是一本介绍程序库的书，其中的很多组件是彼此独立的，所以，在阅读完第零章和第一章之后，就可以自由地阅读其他章节了
  * 读者既可以按照本书的物理顺序循序渐进地逐页阅读，也可以查阅目录跳到自己感兴趣的章节
  * 不过，对于大多数读者来说，第一种方式是更被推荐的
- 本书并不包含Boost库的所有接口说明，如果读者对某些地方有疑虑，可以参考Boost说明文档或直接阅读Boost实现代码

七、本书的源代码

- 本书的源代码的地址是，https://github.com/chronolaw/boost_guide.git

<2022-9-26>
