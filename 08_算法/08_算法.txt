第八章 算法

一、foreach
  1、用法
  2、详细解说
  3、更优雅的名字
  4、支持的序列类型
  5、存在的问题
二、minmax
  1、用法
  2、存在的问题
三、minmax_element
  1、基本用法
  2、其他用法
四、algorithm
  1、clamp
  2、clamp_range
  3、hex/unhex
五、总结

- C++98提供了大量的算法，可以对容器进行统计、查找、赋值、排序等操作，差不多囊括了实际工作中所有可能用到的算法
- C++11/14/17进一步增强了算法，包括all_of、any_of、none_of等

- Boost及时跟进，也提供了对应的实现，同时还贡献了一些重要的库，包括基于图的算法库graph、图像处理算法库gil、字符串处理算法库string_algo等
- 本章不讨论graph和gil，而是讨论Boost的三个算法组件，foreach、minmax和algorithm，它们不是很大，但很有用

一、foreach

- 随着历史车轮的滚滚前进，经典的for循环的写法逐渐显出了繁琐、笨拙的缺点
- 新的C++标准引入了新式的for循环，比老式的for循环更加简洁自然，但有的编译器不一定支持该特性

- Boost的foreach库弥补了这个遗憾，它提供类似的序列遍历能力，但不需要使用麻烦的迭代器，也不需要定义新的函数对象，同时还具有C++标准所没有的反向遍历的能力
- 使用foreach库需要包含头文件<boost/foreach.hpp>

1、用法

- foreach提供了两个宏，BOOST_FOREACH和BOOST_REVERSE_FOREACH，分别用于正向和反向遍历
  * 使用简单方便，与标准的for循环很相似
  * 其中的auto关键字可以加上const或&来修饰，用来推导常量或引用类型，一般来说，auto&的形式最好，可以避免无谓的拷贝操作

2、详细解说

- 使用BOOST_FOREACH来遍历序列有一个前提，序列必须是稳定的，也就是说，在循环过程中不能改变序列的长度，也不能增减序列的元素，否则会导致遍历使用的迭代器失效，发生未定义的错误
- 除此之外，BOOST_FOREACH和普通的for循环完全相同，可以使用break、continue、return以及函数调用，甚至嵌入另一个BOOST_FOREACH中
- 唯一不同的是循环开始时的声明，BOOST_FOREACH模仿C++标准只接受两个参数，循环变量和要遍历的序列
- 如果需要高效地使用序列内的元素或者修改序列的元素，则需要在声明时使用引用的形式
- 和普通的for循环一样，声明循环变量的位置可以是在BOOST_FOREACH之前

3、更优雅的名字

- 如果大写的宏定义看着刺眼，可以把BOOST_FOREACH重定义为自己喜欢的名字，这样用起来也更方便
  * 注意，不要定义foreach(x, y)这样的形式，如果把参数也作为宏的一部分，可能会引发错误
  * 另外，选择新名字时，注意不要和std::for_each算法或其他名字混淆

4、支持的序列类型

- BOOST_FOREACH建立在boost.range的概念上，任何符合range概念的序列都会被自动支持
  * 具体地说，BOOST_FOREACH支持标准容器、原始数组、C字符串以及元素是迭代器的std::pair（这一点是C++标准中的for循环没法比的）
  * 此外，BOOST_FOREACH支持Boost库中的大部分容器类型

- 如果希望BOOST_FOREACH支持自定义的序列，则需要做一些额外的工作
  * 只要自定义的序列提供了内部的iterator/const_iterator以及begin和end成员函数，BOOST_FOREACH就可以支持它
  * 另一种方法是，让自定义序列满足range的概念

5、存在的问题

- 因为BOOST_FOREACH是宏，有时确实会带来问题，当循环变量是一个包含逗号的模板类型时，它就会失败，比如，BOOST_FOREACH(pair<int, string> x, m)，因为宏无法识别<>语法
- 最简单的解决办法是，使用auto来推导循环变量的类型，但在C++98中，只能通过typedef来消除BOOST_FOREACH语句中的模板类型，或者在循环体外声明变量
- 此外，Boost在utility库中提供了一个变通的方案，使用宏BOOST_IDENTITY_TYPE将模板类型括起来，即，BOOST_FOREACH(BOOST_IDENTITY_TYPE((pair<int, string>)) x, m)

二、minmax

- minmax库是对C++标准库中的std::min/max和std::min_element/max_element的增强，可以在一次处理中同时获得最大值和最小值，在执行效率上有很大提高，它已被收入C++标准
- minmax位于名字空间boost，需要包含头文件<boost/algorithm/minmax.hpp>

1、用法

- minmax函数的使用方法和std::min/max类似，但因为要同时返回两个值，所以返回值的类型是一个包含两个元素的tuple
- 由于tuple类型的声明较为复杂，最好是使用auto来自动推导出返回值的类型
- 返回的tuple中的第一个元素是最小值，第二个元素是最大值，可以通过boost::get<N>来访问

2、存在的问题

- minmax函数在内部使用make_tuple和cref来生成tuple类型的返回值，但没有用Boost限定它们，因此在和C++标准库混用时，编译器可能因为无法选择正确的实现而报错
- 在Boost修复这个bug之前，应当使用std::minmax，它不仅完全兼容boost::minmax，而且还支持初始化列表作为参数
- 注意，std::minmax返回的是pair而不是tuple，不过，使用auto完全可以忽略这个差别

三、minmax_element

- minmax_element组件包含一组算法，它们改进了std::min_element/max_element函数，可以同时返回容器中的最大值和最小值
- minmax_element位于名字空间boost，需要包含头文件<boost/algorithm/minmax_element.hpp>

1、基本用法

- minmax_element是一个算法族，包括first_min_element、last_min_element、first_min_first_max_element、first_min_last_max_element等一系列算法
- minmax_element是其中最基本、最常用的算法
- minmax_element接受一个序列区间作为参数，查找其中第一次出现的最大值和最小值，并以std::pair的形式返回其迭代器，既不是值，也不是tuple，所以需要使用解引用操作符*来获取相应的值

2、其他用法

- minmax_element的其他同族函数用于序列中存在相同元素的情况，它们可以找出第一个或者最后一个最大值或最小值
- 这些同族函数的形式为xxx_[min|max]_yyy_[max|min]_element，其中，xxx和yyy可以是first或者last

四、algorithm

- algorithm库是一个算法的集合，包含C++11/14中的算法实现以及很多有用的小算法，比如，all_of、none_of、equal、KMP、Boyer-Moore Search等
- 本节并不介绍C++11/14中的算法和字符串查找算法，只介绍algorithm中的clamp和hex

1、clamp

- clamp算法位于名字空间boost::algorithm，需要包含头文件<boost/algorithm/clamp.hpp>
- 顾名思义，clamp用来判断一个值是否“夹”在另外一对值之间
  * 如果该值位于区间内，则返回该值
  * 如果该值在区间左边，则返回区间的左边值
  * 如果该值在区间右边，则返回区间的右边值

2、clamp_range

- clamp还有一个可以操作迭代器或容器的版本，clamp_range
- clamp_range可以对一组元素执行clamp算法，然后把结果写入一个输出迭代器中，这和标准算法transform类似

3、hex/unhex

- hex算法用来执行十六进制的编码和解码，包含两个互逆的操作，hex/hex_lower和unhex
- hex算法位于名字空间boost::algorithm，需要包含头文件<boost/algorithm/hex.hpp>

- hex/hex_lower和unhex都有三种形式，分别用于迭代器对、数组指针和区间
- hex和hex_lower使用0~9和A~F/a~f把输入编码为十六进制字符串，unhex则执行反向操作，把十六进制字符串解码为原始数据
- 注意，将hex、hex_lower和unhex用于数组指针时，数组必须以'\0'结尾
- hex和hex_lower不会抛出异常，unhex在输入数据错误时会抛出异常not_enough_input或non_hex_input，它们派生自boost::exception和std::exception

五、总结

- 有了foreach库，不需要再使用繁琐的迭代器就可以轻松地遍历容器
- minmax库增强了C++标准库中的最大值和最小值算法，可以在一次运算中获得两个结果，性能比原来的min/max算法好很多
- algorithm库包括很多有用的算法，这里只介绍了clamp和hex

<2022-10-14>
