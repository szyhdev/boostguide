第一章 总论

一、简介
  1、获取方式
  2、目录结构
  3、使用方式
二、开发环境
  1、快捷安装
  2、完整安装
  3、定制安装
  4、编译验证
三、构建工具
  1、安装方式
  2、构建脚本
  3、构建语言
  4、构建命令
四、总结

- Boost是一个功能强大、构造精巧、跨平台、开源并且完全免费的C++程序库
- 本章带领读者快速浏览Boost程序库，了解它的历史、组成和基本使用方式，并在Linux下搭建自己的开发环境，为之后的学习做准备

一、简介

- 1998年，Beman G.Dawes，C++标准委员会成员之一，发起倡议并建立了Boost社区，目的是为C++程序员提供免费的、经过同行审查的、可移植的、高质量的C++源程序库
- Boost强调程序库要与C++标准库很好地共同工作，建立在既有实践的基础上提供参考实现，以适合最后的标准化
- C++标准库中有三分之二来自Boost库，将来还会有更多的内容进入新标准

- Boost库的优点
  * 许多Boost库的作者本身就是C++标准委员会的委员，Boost天然成为了C++标准库的后备，获得了“准标准库”的美誉
  * Boost库独特的同行审查制度保证了每一个组件都经过严格的审查和验证，具有很高的工业强度
  * Boost库采用了类似STL的编程范式，但代码格式优美清晰，易于阅读
  * Boost库的发布采用了Boost Software License，它是一个不同于GPL和Apache的非常宽松的许可证，允许用户将Boost库用于任何用途，无需支付任何费用

- 本书的内容基于Boost官方于2019年12月发布的1.72版本编写，共包含160多个库/组件，涵盖字符串与文本处理、容器、迭代器、算法、图像处理、模板元编程、并发编程等多个领域
- 鉴于Boost库中的很多组件已经相当稳定，所以，本书讲述的内容对1.72版本之前和之后的版本也基本适用

1、获取方式

- Boost提供源代码形式的安装包，可以从Boost官方网站上下载
- 本书使用的是boost_1_72_0.tar.gz，把该文件解压缩到磁盘上的任意位置即可

2、目录结构

- Boost压缩包解压缩以后有5万多个文件，占据近700M的磁盘空间，包含boost、doc、libs、more、status、tools等目录
- 多数情况下，只需要关心boost子目录，这里面以头文件的形式分门别类地存放了将要用到的库代码

3、使用方式

- Boost库的大多数组件不需要编译链接，只需要在源代码中直接包含头文件即可
- Boost库的头文件和常见的.h头文件或C++标准库的不带后缀的头文件不同，它把C++类的声明和实现放在同一个文件中，所以，文件的后缀为.hpp
- 有少量的库（比如chrono、date_time、program_options、test、thread等）必须编译为静态库或动态库，并在构建时指定链接选项才能使用

二、开发环境

- C++是一种大型语言，C++98已经面世二十余年，C++11也已经出台近十年，但仍然有很多编译器未能实现C++的全部特性
- Boost使用了大量的C++的高级特性，因此，并非所有的编译器都能很好地支持Boost
- 编写本书时使用的操作系统是Ubuntu 18.04.1，编译器是其自带的GCC 7.4.0，所有代码均在该环境下编译通过

1、快捷安装

- 在Linux下安装Boost很容易，在解压缩后的目录下直接执行以下命令
  * ./bootstrap.sh：编译前的配置工作
  * ./b2 install：编译并安装Boost
- 默认情况下，Boost将编译release版本的库文件，把头文件安装到/usr/local/include中，把库文件安装到/usr/local/lib中

2、完整安装

- 如果需要完整编译Boost，可以使用buildtype选项指定编译类型，./b2 --buildtype=complete install

3、定制安装

- 完整安装Boost费时费力，而在开发过程中这些库并不会完全用到，因此，Boost允许用户进行定制安装
  * ./b2 --show-libraries：查看所有必须编译后才能使用的库
  * ./b2 --with-date_time --buildtype=complete install：使用with或without选项打开或关闭某个库的编译
  * sudo ./b2 link=static install：编译并安装所有静态链接库

4、编译验证

- 编写一个简单的Boost程序来验证开发环境
  * 头文件<boost/version.hpp>定义了两个宏，BOOST_VERSION和BOOST_LIB_VERSION
  * 头文件<boost/config.hpp>定义了三个宏，BOOST_PLATFORM、BOOST_COMPILER和BOOST_STDLIB

三、构建工具

- 在Linux下有很多构建工具，最常用的是make，此外还有cmake、scons等
- 本书采用Boost自带的构建工具b2，它是专门为构建Boost这样复杂度的软件而开发的，功能强大又灵活方便

1、安装方式

- 在安装Boost库之后就可以安装b2了
  * cd tools/build：进入b2的安装目录
  * ./bootstrap.sh; ./b2 install：执行配置脚本并安装b2
- b2默认会被安装到/usr/local/bin下

2、构建脚本

- 和make一样，b2也使用文本格式的构建脚本来管理代码，其名称通常为jamfile或Jamfile
- 此外，b2还需要一个特殊的jamroot文件，它需要放在整个项目的根目录下，用来定义整个项目的构建设置并管理项目树

3、构建语言

- b2使用的构建语言叫bjam，它是一种解释型语言，拥有完整的语法定义，包括变量、分支、循环、函数等，甚至还包括类
- b2类似于shell、awk等脚本语言
  * 构建目标程序e，使用两个源文件和一个库：exe e : xxx.cpp yyy.cpp zzz ;
  * 构建目标t，并在编译后自动运行，通常用于单元测试：unit-test t : xxx.cpp ;
  * 构建库zzz，它依赖于depend_libs：lib zzz : depend_libs ;
- 需要注意的是，bjam是基于token的语言，它使用空格、tab等空白字符来区分语法元素，缺少这些空白字符将导致语法错误

4、构建命令

- b2是bjam语言的解释器，它查找目录下的jamfile，并向上查找jamroot，解释其中的bjam语句，完成软件的构建
- 常用的b2命令
  * b2 xxx：构建目标xxx
  * b2 debug|release：构建debug或者release版本
  * b2 clean：清除构建
  * b2 -n：显示编译命令但不执行它们
  * b2 -d2：调试模式，显示并执行编译命令
  * b2 -h：显示帮助
- 通常只需要执行b2就可以了，它相当于make all

四、总结

- 本章介绍了Boost的历史和特点
- 本章简要介绍了本书的开发环境、编译和安装Boost库的过程
- 本章还介绍了构建工具b2

<2022-9-26>
